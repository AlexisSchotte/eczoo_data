#######################################################
## This is a code entry in the error correction zoo. ##
##       https://github.com/errorcorrectionzoo       ##
#######################################################

code_id: 2dcolor
physical: qubits
logical: qubits

name: '2d Color code'
introduced: '\cite{arxiv:quant-ph/0605138}'

description: |
  The 2-dimensional color codes are strong \hyperref[code:css]{CSS stabilizer} codes \cite{arXiv:1407.5103} and a case of D-dimensional color codes. The 2-dimensional color code is defined on a 2-dimensional trivalent lattice with 3-colorable faces, usually a honeycomb or 4-8-8 lattice. Each face corresponds to two stabilizer generators, \(X\) and \(Z\), and are the tensor product of \(X\)s acting on all the qubits of a face or \(Z) acting on all of the qubits of a face. 
  
  String operators are defined on the paths along the edges of the qubit. These paths can have branching points. Each path has two string operators, one corresponding to the \(X\) basis and one corresponding to the \(Z\) basis. Like the faces, String operators also come in 3 colors. String operators commute or anti-commute. They anti-commute when they cross an odd number of times and have a different color and type. String operators correspond to encoded X or Z operators when they are closed and not boundaries. 
  
  Color codes encode twice as many qubits as the surface code.\cite{arXiv:quant-ph/0605138, doi:10.1103/PhysRevLett.98.160502, doi:10.1103/PhysRevA.76.012305}
  \begin{figure}
    \includegraphics{colorCodeHoneycombHighlightedChecksAdjColor.svg}
    \caption{Stabilizer generators and string operators of a 2D color code defined on a honeycomb lattice on a torus. 
    The plaquette operators generate the stabilizer group of the toric code where each face corresponds to an X or Z plaquette operator.  The string operators
    are pairs of X and Z logical operators that wrap around the torus. There are only four independent string operators, so there are two independent colors for the string operators \cite{arXiv:1311.0277}.}
    \label{figure:toric-code-operators}
  \end{figure}
protection: 'As with the surface code, the code distance depends on the specific kind of lattice used to define the code. More precisely, the distance depends on the homology of logical string operators \cite{arXiv:1311.0277}. The \hyperref[code: triang_color]{triangular color codes} are a family of 2d color codes that encode 1 logical qubit for odd distances.'

features:
  rate: 'For general 2D manifolds, \(kd^2 \leq c(\log k)^2 n\) for some constant \(c\) \cite{arXiv:1301.6588}, meaning that color codes with finite rate can only achieve an asymptotic minimum distance that is logarithmic in \(n\).'

  transversal_gates: 'Transversal CNOT can be implemented via braiding \cite{arXiv:0806.4827}. Universal transversal gates can be achieved using lattice surgery \cite{arXiv:1407.5103}, or code deformation \cite{doi:10.1088/1367-2630/13/4/043005,arXiv:0806.4827}.'

  general_gates:
    - 'Lattice surgery scheme for 2D layout yields lower resource overhead when compared to analogous surface code scheme \cite{arXiv:2201.07806}.'

  decoders:
    - 'Projection decoder \cite{doi:10.7907/059V-MG69}.'
    - 'Matching decoder gives low logical failure rate \cite{arXiv:2108.11395}.'
    - 'Integer-program-based decoder \cite{arXiv:1402.3037}.'
    - 'Restriction decoder \cite{doi:10.1088/1367-2630/ab68fd}.'
    - 'Cellular-automaton decoder for the \(XYZ\) color code \cite{arxiv:2203.16534}.'
    - 'MaxSAT-based decoder \cite{arxiv:2303.14237}.'
#    - 'Flag fault-tolerant protocols for distance-nine 2D color codes \cite{}.'

  fault_tolerance:
    - 'Clifford gates can be performed fault-tolerantly on a suitable 2D lattice \cite{arxiv:quant-ph/0605138}.'
    - 'Steane''s ancilla-coupled measurement method \cite{arXiv:1407.5103}'

  code_capacity_threshold:
    - '\(12.6\%\) threshold for triangular color code with the restriction decoder \cite{arXiv:1911.00355}.'
    - '\(12.6\%\) threshold for triangular color code with the projection decoder (\cite{arXiv:1308.6207}) \cite{arXiv:1802.08680}'
    - '\(8.7\%\) threshold for phase errors for the hexagonal color code with the projection decoder \cite{arXiv:1308.6207}'
    - '\(\geq 6\%\) threshold with rescaling-based decoder \cite{arXiv:2112.09584}.'


  threshold:
    - '\(\geq 6.25\%\) threshold for 2D color codes with error-free syndrome extraction, and \(0.1\%\) with faulty syndrome extraction \cite{arXiv:0907.1708}.'
    - '\(0.2\%\) with depolarizing circuit-level noise using two flag-qubits per stabilizer generator and the restriction decoder \cite{arXiv:1911.00355}.'
    - '\(0.143\%\) with depolarizing circuit-level noise using perfect-matching decoder \cite{arXiv:1407.5103}.'


#realizations:

relations:
  parents:
    - code_id: qubit_css
    - code_id: generalized_color
      detail: 'The generalized color code for \(G=\mathbb{Z}_2\) reduces to the color code.'
    - code_id: quantum_double_abelian
      detail: 'When treated as ground states of the code Hamiltonian, color code states on realize \(\mathbb{Z}_2\times\mathbb{Z}_2\) topological order \cite{arxiv:0906.4127}, equivalent to the phase realized by two copies of the surface code \cite{arxiv:1503.02065}.'
  cousins:
    - code_id: galois_topological
      detail: 'The 2D color code has been extended to Galois qudits.'
    - code_id: surface
      detail: 'The 3D color code is equivalent to multiple decoupled copies of the 2D surface code \cite{arxiv:1007.4601,arxiv:1503.02065,arXiv:1804.00866}.
      Conversely, the 2D color code can \hyperref[topic:code-switching]{condense} to form the 2D surface code in nine different ways, i.e., by adding two body hopping terms along one of its three hexagonal directions to the stabilizer group and then taking the center of the resulting nonabelian group \cite{arxiv:2212.00042}.'
    - code_id: hexagonal
      detail: 'The 2D color code is defined on a trivalent lattice such as the honeycomb lattice.'


# Begin Entry Meta Information
_meta:
  # Change log - most recent first
  changelog:
    - user_id: CellaKove
      date: '2023-06-20'
