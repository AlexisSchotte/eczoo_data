#######################################################
## This is a code entry in the error correction zoo. ##
##       https://github.com/errorcorrectionzoo       ##
#######################################################

# Use UTF-8 unicode encoding
# AMS-TeX commands are rendered inside \( ... \) using MathJaX.
# Allowed external bibliographic references are
#    \cite{arXiv:#.#} or \cite{arXiv:quant-ph/#} (PREFERRED),
#    \cite{doi:#}, or, as a last resort
#    \cite{manual:{(enter citation line incl. author and year here)}}
# External websites such as code tables, coding theory packages, github pages linked as
#    \url{https://example.com/example}
#    \href{https://example.com/example}{link text}
# Internal references to codes are
#    \hyperref[code:code_id]{link text}
# Delete instructional comments when submitting

# code id, physical, logical are all lower case
code_id: fountain
physical: bits
logical: bits

# Apostrophes are denoted by two apostrophe characters, i.e., ''
# Code title (SINGULAR) + first reference(s) (optional).
name: 'Fountain'
introduced: '\cite{doi:10.1049/ip-com:20050237}'

# Anything applicable to a larger parent set of codes (see below) should go in
# that entry instead of here.
description: 'Fountain codes are a class of erasure codes based on the idea of generating an endless stream of encoded packets for the receiver. The code is designed so that the receiver can recover the original transmission of size \(Kl\) bits after receiving at least \(K\) packets each of \(l\) bits. The simplest example of a fountain code is the random linear fountain code.'

# Long fields such as this one can be written in other YML formats, such as the one using the pipe symbol
# protection: |
#   text...
#   more text...
protection: 'Designed to protect agains erasure errors. '

# This field starts a list of specific labeled subfields; do not leave it
# empty. If empty, comment out. Also, indentations are important!
features:

  # The fields below relate to specific properties of the code that are worth
  # noting. In some cases (see below), there might be multiple pieces of
  # information associated with a field (e.g., mutliple encoders/decoders,
  # multiple facts about fault tolerance, etc.); in such cases, the field
  # accepts a list of text entries, with one item per piece of information.
  #
  # Any fields below should be omitted if they do not apply.

  rate: 'This class of codes does not have a fixed rate, and as such are also called rateless erasure codes. Since the number of encoded packets is technically unlimited, the rate will tend to zero. In practice, transmission times and total packets sent are chosen so that the rate is finite.'
  
  # This field that starts a list of strings, indexed by a dash; do not leave it
  # empty. If empty, comment out.
  encoders:
    - 'Take some message of size \(Kl\) and split into \(K\) packets, \(p_0, p_1, ..., p_K\). For each packet \(\hat{p}_n\) to be transmitted do the following: Generate \(K\) random bits \({G_{nk}\) and let \(\hat{p}_n\) be the bitwise sum of the source packets when \(G_{nk}\) is 1, \( \hat{p}_n = \sum_{k=1}^K p_k G_{kn} \) '
    - 'Error correction can be applied to each packet.'
#    - 'Measurement-based preparation ... with ancilla overhead of ... .'
#    - 'Leave discussion of fault tolerance to fault-tolerance field.'

  # Not all fields are indexed by a dash
#  transversal_gates: 'Transversal ... gates \cite{doi:ok-paper}. Comment out if doesn''t apply.'

#  general_gates:
#    - 'Universal gate set achieved by either additional ... gate.'
#    - 'Magic-state distillation protocols'
#    - 'kth Clifford hierarchy gates obtained by ... circuits'

  decoders:
    - 'Invert the fragment generator matrix resulting from the continuous encoding process. If exactly \(K\) packets are received, then the probability of decoding correctly is 0.289. Extra packets increase this probability exponentially.'
    - 'The runtime of decoding is dominated by matrix inversion, which takes \(O(n^3\) time.'
#    - 'Just-in-time decoder with ... \cite{arxiv:awesome-paper}.'

#  fault_tolerance:
#    - 'Transversal gates are fault-tolerant w.r.t. ... noise \cite{doi:ok-paper}'
#    - 'Other fault-tolerant gadgets (measurements, encoders, error correcting steps)'
#    - 'Noise-model-preserving gadgets, noise-biased gates, fault-tolerant flag error correction'
#    - 'Pieceable fault tolerance.'

#  code_capacity_threshold:
#    - '\(1.5%\) error-correction threshold against some noise with *noiseless* decoder of some complexity \cite{arxiv:paper}.'
#    - '\(5.2\%\) asymptotic upper bound from some estimation algortihm (Monte Carlo, e.g.) that may or may not have a feasible decoder.'

#  threshold:
#    - '\(0.3\%\) error-correction threshold ... with *noisy* ... decoder of some complexity \cite{doi:good-paper}.'
#    - '\(10^{-5}\) computational threshold using concatenated scheme under ... noise with overhead of ... '
#    - '\(4.5\%\) asymptotic lower bound on fault-tolerant threshold with ... noise, ... overhead, and ... complexity.'
#    - '\(6.7\%\) threshold using magic-state distillation protocols assuming ... Clifford gates.'

  # Propose a field that you feel is applicable to a large and interesting class of codes
  #some_other_field:
  # - 'detail'

realizations:
  # List and explain the different "domains" of realizations in list items.
  # Group closely related realizations into a single item. It's OK to have a
  # single list item. Each item should more or less correspond to what would be
  # said in a paragraph.
  - 'Useful in situations like broadcasting and file distribution.'

#notes:
#  - 'Random linear fountain codes approach the Shannon limit '  
#  - 'Links to code tables, github, GAP algebra packages, more papers \cite{arXiv:####.#####}.'
#  - 'Connections to physics; based on \(H^4(\mathcal{BG},\mathbb{Z})\)'
#  - 'Can reference other codes, but try to put such connections in the relations fields.'
#  - 'Anything noteworthy that''s not above or below.'

#relations:
#  parents:
#    - code_id: tornado
#      detail: 'The smallest code family that includes this code that is defined over the same physical space structure or alphabet.'
#  cousins:
#    - code_id: code_id2
#      detail: 'Reed-Soloman codes'
#    - code_id: code_id3
#      detail: 'Code family of similar encoding but with different physical space structures (qudit vs. qubit surface code).'
#    - code_id: code_id4
#      detail: 'Codes (classical or quantum) related on other ways to this code.'